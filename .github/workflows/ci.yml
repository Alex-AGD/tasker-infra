name: Infrastructure CI Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-helm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: "latest"

      - name: Add bitnami repo
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Add helm repos
        run: |
          helm repo add vmware-tanzu https://vmware-tanzu.github.io/helm-charts
          helm repo update

      - name: Validate Helm Chart
        run: |
          cd helm/tasker
          helm dependency update
          helm lint .
          helm template .

  validate-k8s:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download kubeconform
        run: |
          wget https://github.com/yannh/kubeconform/releases/download/v0.6.4/kubeconform-linux-amd64.tar.gz
          tar xf kubeconform-linux-amd64.tar.gz
          sudo mv kubeconform /usr/local/bin/
          rm kubeconform-linux-amd64.tar.gz

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "latest"

      - name: Create kind cluster
        uses: helm/kind-action@v1.8.0

      - name: Install CRDs
        run: |
          # Install Prometheus Operator CRDs
          kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/example/prometheus-operator-crd/monitoring.coreos.com_prometheusrules.yaml

          # Install ArgoCD CRDs
          kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/crds/application-crd.yaml
          kubectl apply -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/crds/appproject-crd.yaml

      - name: Validate Kubernetes manifests
        id: validate
        run: |
          find . -type f -name "*.yaml" -not -path "./helm/*" -not -path "./monitoring/*" -not -path "./argocd/*" | while read file; do
            kubeconform -strict -summary "$file"
          done
        continue-on-error: true

      - name: Validate CRDs
        if: always()
        run: |
          # Validate PrometheusRule
          if [[ -f ./monitoring/prometheus-rules/tasker-alerts.yaml ]]; then
            kubectl apply --dry-run=client -f ./monitoring/prometheus-rules/tasker-alerts.yaml
          fi

          # Validate ArgoCD Application
          if [[ -f ./argocd/applications/tasker.yaml ]]; then
            kubectl apply --dry-run=client -f ./argocd/applications/tasker.yaml
          fi

      - name: Prepare notification message
        if: always()
        id: notification
        run: |
          if [ "${{ steps.validate.outcome }}" = "success" ]; then
            echo "message=✅ Kubernetes manifests validation passed" >> $GITHUB_OUTPUT
          else
            echo "message=❌ Kubernetes manifests validation failed" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: ${{ steps.notification.outputs.message }}
          SLACK_TITLE: Kubernetes Manifest Validation
          SLACK_COLOR: ${{ steps.validate.outcome == 'success' && 'good' || 'danger' }}

#      - name: Trigger ArgoCD Sync
#        run: |
#          curl -X POST https://${{ secrets.ARGOCD_SERVER }}/api/webhooks/webhook \
#            -H "Content-Type: application/json" \
#            -H "X-ArgoCD-Webhook-Token: ${{ secrets.ARGOCD_WEBHOOK_TOKEN }}" \
#            -d '{"repository":{"url":"https://github.com/Alex-AGD/tasker-infra"}}'