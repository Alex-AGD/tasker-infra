apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "tasker-app.fullname" . }}
  labels:
    {{- include "tasker-app.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "tasker-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      labels:
        {{- include "tasker-app.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}

      initContainers:
        - name: wait-for-db
          image: postgres:14-alpine
          command: ['sh', '-c', 
            'echo "Attempting to connect to PostgreSQL at {{ .Release.Name }}-postgresql:5432";
            until pg_isready -h {{ .Release.Name }}-postgresql -p 5432 -U ${DB_USER}; 
            do echo "Waiting for database to be ready..."; 
            sleep 2; 
            done;
            echo "PostgreSQL is ready!";
            psql -h {{ .Release.Name }}-postgresql -U ${DB_USER} -d {{ .Values.postgresql.auth.database }} -c "SELECT version();" || echo "Failed to execute query";']
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "tasker-app.fullname" . }}
                  key: DB_USERNAME
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "tasker-app.fullname" . }}
                  key: DB_PASSWORD
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: SPRING_CONFIG_LOCATION
              value: file:/config/application.yml
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "tasker-app.fullname" . }}
                  key: DB_USERNAME
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "tasker-app.fullname" . }}
                  key: DB_PASSWORD
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/{{ .Values.postgresql.auth.database }}
            - name: SPRING_JPA_DATABASE_PLATFORM
              value: org.hibernate.dialect.PostgreSQLDialect
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: validate
            - name: SPRING_JPA_SHOW_SQL
              value: "true"
            - name: SPRING_JPA_OPEN_IN_VIEW
              value: "false"
            - name: SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT
              value: "20000"
            - name: SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE
              value: "5"
            - name: HIBERNATE_DIALECT
              value: org.hibernate.dialect.PostgreSQLDialect
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: config
              mountPath: /config
              readOnly: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 10"]
      volumes:
        - name: config
          configMap:
            name: {{ include "tasker-app.fullname" . }}-config
            items:
              - key: application.yml
                path: application.yml
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0